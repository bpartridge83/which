{
  "name": "perf-time",
  "version": "0.1.0",
  "description": "Low impact date/time getters.",
  "main": "perf-time.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/AlexeyKupershtokh/node-perf-time.git"
  },
  "keywords": [
    "date",
    "time",
    "performance"
  ],
  "devDependencies": {
    "benchmark": ">0"
  },
  "author": {
    "name": "Alexey Kupershtokh"
  },
  "license": "BSD",
  "readme": "node-perf-time\n==============\n\nLow impact date/time getters.\n\n```\n+new Date               x  1,106,626 ops/sec ±0.80% (99 runs sampled)\nDate.now()              x  1,418,551 ops/sec ±0.16% (101 runs sampled)\nprocess.hrtime()        x    833,820 ops/sec ±0.16% (101 runs sampled)\nmicrotime.now()         x  1,247,487 ops/sec ±1.03% (100 runs sampled)\nperfTime(1000000).get() x 24,040,578 ops/sec ±1.85% (85 runs sampled)\nperfTime(100000).get()  x 18,311,654 ops/sec ±0.51% (93 runs sampled)\nperfTime(10000).get()   x  8,393,439 ops/sec ±0.37% (97 runs sampled)\nperfTime(2000).get()    x  3,362,967 ops/sec ±0.30% (100 runs sampled)\nperfTime(900).get()     x  1,375,311 ops/sec ±0.17% (101 runs sampled)\n```\n\nInstallation\n============\n```\nnpm install perf-time\n```\n\nUsage\n=====\n```javascript\nvar perfTime = require('perf-time');\n\nvar t = new perfTime();\nconsole.log(t.get()); // outputs: 1350895024399\n\n// set custom rate\nvar t = new perfTime(10000);\nconsole.log(t.get()); // outputs: 1350895024403\n\n// set custom provider instead of default Date.now()\nvar provider = function() { return (new Date).getMilliseconds(); };\nvar t = new perfTime(provider);\nconsole.log(t.get()); // outputs 403\n```\n\nPrinciples\n==========\nThis class caches calls to time getters. This cache is flushed in two ways:\n * Every 100th iteration (by default) during blocking code.\n * Every millisecond using setTimeout(..., 1).\n\nPros and cons\n=============\n * :smile: Works accurate enough when you don't have long blocking code.\n * :smile: Works accurate enough when you have long blocking code but calculate time often enough (at 100K/sec rate).\n * :sweat_smile: Can work inaccurate when you have long blocking code with time calculations at lower rates. Just pass the required `rate` for this case for improving accuracy. :smile:\n * :smile: You can use higher rates to trade accuracy for performance.",
  "readmeFilename": "README.md",
  "_id": "perf-time@0.1.0",
  "dist": {
    "shasum": "08625bd311c8cb49c3858fdd0de0598ce0fdf1bf"
  },
  "_from": "perf-time"
}
